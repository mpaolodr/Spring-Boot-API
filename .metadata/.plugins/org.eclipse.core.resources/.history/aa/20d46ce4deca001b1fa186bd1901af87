package training.qa.springboot.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import training.qa.springboot.domain.Item;
import training.qa.springboot.service.ItemService;

@RestController
@RequestMapping("/item")
public class ItemController {
	
	private ItemService service;
	
	public ItemController(ItemService service) {
		this.service = service;
	}
	
//	Create
	@PostMapping("/add-item")
	public ResponseEntity<Item> addItem(@RequestBody Item item) {
		Item i = this.service.create(item);
		
		if (i != null) {
			return new ResponseEntity<Item>(i, HttpStatus.CREATED);
		}
		
		return new ResponseEntity<Item>((Item) null, HttpStatus.BAD_REQUEST);
	}
	
//	Read ONE
	@GetMapping("/read/{itemId}")
	public ResponseEntity<String> readOne(@PathVariable Long itemId) {
		
		Item i = this.service.readOne(itemId);
		
		if (i != null) {
			String response = String.format("Item ID: %d, Item Name: %s, Item Price: %.2f", i.getItemId(), i.getItemName(), i.getItemPrice());
			return new ResponseEntity<String>(response, HttpStatus.OK);
		}
		
		return new ResponseEntity<String>("No item with that ID was found", HttpStatus.BAD_REQUEST);
	}
	
//	Read ALL
	@GetMapping("/read-all") 
	public ResponseEntity<List<Item>> readAll() {
		return new ResponseEntity<List<Item>>(this.service.readAll(), HttpStatus.OK);
	}
	
	
//	Update
	@PutMapping("/update/{itemId}")
	public ResponseEntity<String> update(@PathVariable Long itemId, @RequestBody Item newItem) {
		
		Item i = this.service.update(itemId, newItem);
		
		if (i != null) {
			return new ResponseEntity<String>("Item updated successfully", HttpStatus.ACCEPTED);
		}
		
		return new ResponseEntity<String>("No Item with that ID was found", HttpStatus.BAD_REQUEST);
	}
	
	
//	Delete
	@DeleteMapping("/remove/{itemId}")
	public ResponseEntity<String> delete(@PathVariable Long itemId) {
		
		if (this.service.delete(itemId)) {
			return new ResponseEntity<String>("Item was successfully removed", HttpStatus.ACCEPTED);
		}
		
		
		return new  ResponseEntity<String>("No Item with that ID was found", HttpStatus.BAD_REQUEST);
	}
	

}
